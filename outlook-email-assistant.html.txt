<!DOCTYPE html>
<html lang="de">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Business Email Assistant</title>
    <script src="https://appsforoffice.microsoft.com/lib/1/hosted/office.js"></script>
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            min-height: 100vh;
        }
        
        .container {
            max-width: 100%;
            padding: 16px;
        }
        
        .header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 20px;
            border-radius: 12px;
            margin-bottom: 20px;
            text-align: center;
        }
        
        .card {
            background: rgba(255, 255, 255, 0.9);
            backdrop-filter: blur(10px);
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 16px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }
        
        .button {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            cursor: pointer;
            font-weight: 600;
            transition: all 0.3s ease;
            width: 100%;
            margin: 8px 0;
        }
        
        .button:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4);
        }
        
        .button:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }
        
        .button-secondary {
            background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
        }
        
        .button-success {
            background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
        }
        
        .textarea {
            width: 100%;
            min-height: 120px;
            padding: 12px;
            border: 2px solid #e1e5e9;
            border-radius: 8px;
            resize: vertical;
            font-family: inherit;
            transition: border-color 0.3s ease;
        }
        
        .textarea:focus {
            outline: none;
            border-color: #667eea;
        }
        
        .select-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 12px;
            margin: 16px 0;
        }
        
        .select-card {
            padding: 16px;
            border: 2px solid #e1e5e9;
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
            text-align: center;
        }
        
        .select-card.selected {
            border-color: #667eea;
            background: rgba(102, 126, 234, 0.1);
        }
        
        .suggestion-card {
            padding: 16px;
            border: 2px solid #e1e5e9;
            border-radius: 8px;
            cursor: pointer;
            margin: 8px 0;
            transition: all 0.3s ease;
        }
        
        .suggestion-card:hover {
            border-color: #667eea;
            background: rgba(102, 126, 234, 0.05);
        }
        
        .loading {
            display: flex;
            align-items: center;
            justify-content: center;
            gap: 8px;
        }
        
        .spinner {
            width: 20px;
            height: 20px;
            border: 2px solid rgba(255, 255, 255, 0.3);
            border-radius: 50%;
            border-top-color: white;
            animation: spin 1s ease-in-out infinite;
        }
        
        @keyframes spin {
            to { transform: rotate(360deg); }
        }
        
        .status {
            padding: 12px;
            border-radius: 8px;
            margin: 8px 0;
            font-size: 14px;
        }
        
        .status-success {
            background: rgba(34, 197, 94, 0.1);
            color: #16a34a;
            border: 1px solid rgba(34, 197, 94, 0.2);
        }
        
        .status-error {
            background: rgba(239, 68, 68, 0.1);
            color: #dc2626;
            border: 1px solid rgba(239, 68, 68, 0.2);
        }
        
        .status-info {
            background: rgba(59, 130, 246, 0.1);
            color: #2563eb;
            border: 1px solid rgba(59, 130, 246, 0.2);
        }
        
        .step-header {
            font-size: 18px;
            font-weight: 600;
            margin-bottom: 12px;
            color: #374151;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .small-text {
            font-size: 12px;
            color: #6b7280;
            margin-top: 8px;
        }
    </style>
</head>
<body>
    <div id="root"></div>

    <script type="text/babel">
        const { useState, useEffect } = React;

        function OutlookEmailAssistant() {
            const [responseMode, setResponseMode] = useState('bullet');
            const [emailType, setEmailType] = useState('external');
            const [tone, setTone] = useState('professional');
            const [contextEmail, setContextEmail] = useState('');
            const [rawThoughts, setRawThoughts] = useState('');
            const [emailAnalysis, setEmailAnalysis] = useState('');
            const [suggestionOptions, setSuggestionOptions] = useState([]);
            const [generatedEmail, setGeneratedEmail] = useState('');
            const [isAnalyzing, setIsAnalyzing] = useState(false);
            const [isGenerating, setIsGenerating] = useState(false);
            const [analysisComplete, setAnalysisComplete] = useState(false);
            const [status, setStatus] = useState('');

            const externalTones = [
                { value: 'professional', label: 'Professionell' },
                { value: 'formal', label: 'Förmlich' },
                { value: 'diplomatic', label: 'Diplomatisch' },
                { value: 'courteous', label: 'Höflich' }
            ];

            const internalTones = [
                { value: 'collaborative', label: 'Kooperativ' },
                { value: 'direct', label: 'Direkt' },
                { value: 'friendly', label: 'Freundlich' },
                { value: 'informative', label: 'Informativ' }
            ];

            const tones = emailType === 'external' ? externalTones : internalTones;

            // Office.js initialisieren
            useEffect(() => {
                if (typeof Office !== 'undefined') {
                    Office.onReady((info) => {
                        console.log('Office Add-In bereit:', info);
                        setStatus('✅ Mit Outlook verbunden');
                    });
                }
            }, []);

            // Aktuelle E-Mail aus Outlook lesen
            const readCurrentEmail = () => {
                if (typeof Office === 'undefined') {
                    setStatus('❌ Office.js nicht verfügbar');
                    return;
                }

                Office.context.mailbox.item.body.getAsync(
                    Office.CoercionType.Text,
                    (result) => {
                        if (result.status === Office.AsyncResultStatus.Succeeded) {
                            // Zusätzlich auch vorherige Nachrichten aus der Konversation lesen
                            let emailContent = result.value;
                            
                            // Versuche auch den Subject und Sender zu bekommen
                            const subject = Office.context.mailbox.item.subject || '';
                            const sender = Office.context.mailbox.item.sender?.displayName || '';
                            
                            const fullContext = `Betreff: ${subject}\nVon: ${sender}\n\n${emailContent}`;
                            setContextEmail(fullContext);
                            setStatus('✅ E-Mail-Inhalt gelesen');
                        } else {
                            setStatus('❌ Fehler beim Lesen der E-Mail: ' + result.error.message);
                        }
                    }
                );
            };

            // E-Mail-Verlauf analysieren
            const analyzeEmailHistory = async () => {
                if (!contextEmail.trim()) {
                    setStatus('❌ Kein E-Mail-Inhalt zum Analysieren');
                    return;
                }

                setIsAnalyzing(true);
                setEmailAnalysis('');
                setSuggestionOptions([]);
                setAnalysisComplete(false);

                try {
                    // Schritt 1: Analyse
                    const analysisPrompt = `Analysieren Sie diese E-Mail-Konversation und erstellen Sie eine strukturierte Analyse:

${contextEmail}

Erstellen Sie eine Analyse mit:
1. **KONTEXT**: Worum geht es?
2. **HAUPTPUNKTE**: Was sind die wichtigsten Themen?
3. **OFFENE FRAGEN**: Was muss beantwortet werden?
4. **NÄCHSTE SCHRITTE**: Was wird erwartet?

Antworten Sie prägnant in deutscher Sprache.`;

                    const analysisResponse = await fetch("https://api.anthropic.com/v1/messages", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({
                            model: "claude-sonnet-4-20250514",
                            max_tokens: 800,
                            messages: [{ role: "user", content: analysisPrompt }]
                        })
                    });

                    const analysisData = await analysisResponse.json();
                    const analysis = analysisData.content[0].text;
                    setEmailAnalysis(analysis);

                    // Schritt 2: Vorschläge generieren
                    const suggestionsPrompt = `Basierend auf dieser Analyse, erstellen Sie 3 Stichpunkt-Antwort-Vorschläge:

${analysis}

Format:
**DETAILLIERT**
• Punkt 1
• Punkt 2

**FOKUSSIERT**  
• Punkt 1
• Punkt 2

**KURZ**
• Punkt 1
• Punkt 2

Nur die Vorschläge, keine Erklärungen.`;

                    const suggestionsResponse = await fetch("https://api.anthropic.com/v1/messages", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({
                            model: "claude-sonnet-4-20250514",
                            max_tokens: 600,
                            messages: [{ role: "user", content: suggestionsPrompt }]
                        })
                    });

                    const suggestionsData = await suggestionsResponse.json();
                    const suggestionsText = suggestionsData.content[0].text;

                    // Parse Vorschläge
                    const suggestions = [];
                    const sections = suggestionsText.split('**').filter(s => s.trim());
                    
                    for (let i = 0; i < sections.length; i += 2) {
                        if (sections[i] && sections[i + 1]) {
                            const title = sections[i].trim();
                            const content = sections[i + 1].split('\n').filter(line => line.includes('•')).join('\n');
                            if (content) {
                                suggestions.push({
                                    id: suggestions.length + 1,
                                    title,
                                    content
                                });
                            }
                        }
                    }

                    setSuggestionOptions(suggestions);
                    setAnalysisComplete(true);
                    setStatus('✅ Analyse und Vorschläge erstellt');

                } catch (error) {
                    console.error('Analysefehler:', error);
                    setStatus('❌ Fehler bei der Analyse: ' + error.message);
                } finally {
                    setIsAnalyzing(false);
                }
            };

            // E-Mail generieren
            const generateEmail = async () => {
                if (!rawThoughts.trim()) {
                    setStatus('❌ Bitte geben Sie Antwort-Punkte ein');
                    return;
                }

                setIsGenerating(true);
                try {
                    const prompt = `Erstellen Sie eine professionelle ${emailType === 'external' ? 'externe' : 'interne'} E-Mail-Antwort mit ${tone} Ton.

Antwort-Punkte:
${rawThoughts}

${emailAnalysis ? `Kontext:\n${emailAnalysis}\n` : ''}

Erstellen Sie eine strukturierte E-Mail-Antwort in Stichpunkt-Format:
- Angemessene Anrede
- Strukturierte Stichpunkte 
- Professioneller Abschluss

Nur die E-Mail, keine Erklärungen.`;

                    const response = await fetch("https://api.anthropic.com/v1/messages", {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify({
                            model: "claude-sonnet-4-20250514",
                            max_tokens: 800,
                            messages: [{ role: "user", content: prompt }]
                        })
                    });

                    const data = await response.json();
                    setGeneratedEmail(data.content[0].text);
                    setStatus('✅ E-Mail-Antwort generiert');

                } catch (error) {
                    console.error('Generierungsfehler:', error);
                    setStatus('❌ Fehler bei der E-Mail-Generierung: ' + error.message);
                } finally {
                    setIsGenerating(false);
                }
            };

            // E-Mail in Outlook einfügen
            const insertIntoOutlook = () => {
                if (!generatedEmail || typeof Office === 'undefined') {
                    setStatus('❌ Keine E-Mail zum Einfügen oder Office.js nicht verfügbar');
                    return;
                }

                // In das Composer-Feld einfügen
                Office.context.mailbox.item.body.setSelectedDataAsync(
                    generatedEmail,
                    { coercionType: Office.CoercionType.Text },
                    (result) => {
                        if (result.status === Office.AsyncResultStatus.Succeeded) {
                            setStatus('✅ E-Mail in Outlook eingefügt');
                        } else {
                            setStatus('❌ Fehler beim Einfügen: ' + result.error.message);
                        }
                    }
                );
            };

            return (
                <div className="container">
                    <div className="header">
                        <h1>📧 Business Email Assistant</h1>
                        <p>KI-gestützte E-Mail-Antworten für Outlook</p>
                    </div>

                    {status && (
                        <div className={`status ${status.includes('❌') ? 'status-error' : status.includes('✅') ? 'status-success' : 'status-info'}`}>
                            {status}
                        </div>
                    )}

                    {/* Schritt 1: E-Mail lesen */}
                    <div className="card">
                        <div className="step-header">
                            <span>1️⃣</span>
                            Schritt 1: E-Mail aus Outlook lesen
                        </div>
                        <button className="button" onClick={readCurrentEmail}>
                            📖 Aktuelle E-Mail lesen
                        </button>
                        <div className="small-text">
                            Liest automatisch die aktuelle E-Mail-Konversation aus Outlook
                        </div>
                    </div>

                    {/* E-Mail-Typ & Ton */}
                    <div className="card">
                        <div className="step-header">E-Mail-Typ & Ton</div>
                        
                        <div className="select-grid">
                            <div 
                                className={`select-card ${emailType === 'external' ? 'selected' : ''}`}
                                onClick={() => setEmailType('external')}
                            >
                                <strong>🏢 Extern</strong>
                                <div className="small-text">Kunden, Partner</div>
                            </div>
                            <div 
                                className={`select-card ${emailType === 'internal' ? 'selected' : ''}`}
                                onClick={() => setEmailType('internal')}
                            >
                                <strong>👥 Intern</strong>
                                <div className="small-text">Team, Kollegen</div>
                            </div>
                        </div>

                        <div className="select-grid">
                            {tones.map((toneOption) => (
                                <div
                                    key={toneOption.value}
                                    className={`select-card ${tone === toneOption.value ? 'selected' : ''}`}
                                    onClick={() => setTone(toneOption.value)}
                                >
                                    <strong>{toneOption.label}</strong>
                                </div>
                            ))}
                        </div>
                    </div>

                    {/* Schritt 2: Analyse */}
                    {contextEmail && (
                        <div className="card">
                            <div className="step-header">
                                <span>2️⃣</span>
                                Schritt 2: E-Mail analysieren
                            </div>
                            <button 
                                className="button button-secondary" 
                                onClick={analyzeEmailHistory}
                                disabled={isAnalyzing}
                            >
                                {isAnalyzing ? (
                                    <div className="loading">
                                        <div className="spinner"></div>
                                        Analysiere...
                                    </div>
                                ) : (
                                    '🔍 Analysieren & Vorschläge generieren'
                                )}
                            </button>
                        </div>
                    )}

                    {/* Analyse-Ergebnisse */}
                    {emailAnalysis && (
                        <div className="card">
                            <div className="step-header">📊 Analyse-Ergebnisse</div>
                            <div style={{background: '#f8fafc', padding: '12px', borderRadius: '8px', fontSize: '14px', whiteSpace: 'pre-line'}}>
                                {emailAnalysis}
                            </div>
                        </div>
                    )}

                    {/* Schritt 3: Vorschläge */}
                    {suggestionOptions.length > 0 && (
                        <div className="card">
                            <div className="step-header">
                                <span>3️⃣</span>
                                Schritt 3: Antwort-Vorschlag auswählen
                            </div>
                            {suggestionOptions.map((suggestion) => (
                                <div
                                    key={suggestion.id}
                                    className="suggestion-card"
                                    onClick={() => setRawThoughts(suggestion.content)}
                                >
                                    <strong>{suggestion.title}</strong>
                                    <div style={{fontSize: '13px', fontFamily: 'monospace', marginTop: '8px', whiteSpace: 'pre-line'}}>
                                        {suggestion.content}
                                    </div>
                                </div>
                            ))}
                        </div>
                    )}

                    {/* Schritt 4: Bearbeiten */}
                    {analysisComplete && (
                        <div className="card">
                            <div className="step-header">
                                <span>4️⃣</span>
                                Schritt 4: Antwort-Punkte bearbeiten
                            </div>
                            <textarea
                                className="textarea"
                                value={rawThoughts}
                                onChange={(e) => setRawThoughts(e.target.value)}
                                placeholder="Ihre Antwort-Punkte hier bearbeiten..."
                            />
                        </div>
                    )}

                    {/* Schritt 5: Generieren */}
                    {rawThoughts && (
                        <div className="card">
                            <div className="step-header">
                                <span>5️⃣</span>
                                Schritt 5: E-Mail generieren
                            </div>
                            <button 
                                className="button button-success" 
                                onClick={generateEmail}
                                disabled={isGenerating}
                            >
                                {isGenerating ? (
                                    <div className="loading">
                                        <div className="spinner"></div>
                                        Generiere E-Mail...
                                    </div>
                                ) : (
                                    '✨ Finale E-Mail generieren'
                                )}
                            </button>
                        </div>
                    )}

                    {/* Ergebnis */}
                    {generatedEmail && (
                        <div className="card">
                            <div className="step-header">📧 Generierte E-Mail</div>
                            <div style={{background: '#f8fafc', padding: '12px', borderRadius: '8px', fontSize: '14px', whiteSpace: 'pre-line', border: '1px solid #e2e8f0'}}>
                                {generatedEmail}
                            </div>
                            <button className="button" onClick={insertIntoOutlook}>
                                📝 In Outlook einfügen
                            </button>
                        </div>
                    )}
                </div>
            );
        }

        ReactDOM.render(<OutlookEmailAssistant />, document.getElementById('root'));
    </script>
</body>
</html>